# This is a template of makefile for a single Fortran program, with
# source files in several directories. This makefile should be in a
# directory related to the source directories (see notes).

# This is a makefile for GNU make.

# This makefile builds "gambitToCappuccino".

# 1. Source files

# Directory containing the main makefile, used by "VPATH":
makefile_dir = ./src
# (this variable should be overriden on the command line when "make"
# is invoked from a directory other than the main source directory)
# (Define "makefile_dir" before using it in a target.)

# Write paths relative to makefile_dir, separated by blanks (do not
# include ${makefile_dir} in the list):
VPATH := ${makefile_dir} $(addprefix ${makefile_dir}/, utils)

# Or, if there are many directories:
#VPATH := ${makefile_dir} $(addprefix ${makefile_dir}/, $(shell cat ${makefile_dir}/directories))

# Write source file names, without path, separated by blanks, not
# commas. Only .f* files, not included files. Also the file
# containinig the main program unit.
sources := $(sort utils.f90 qsort_c_module.f90 gambitToCappuccino.f90)

# Or, if there are many files, they may be listed in a separate file,
# one file name per line:
##sources := $(shell cat ${makefile_dir}/file_list)
# If you want a sorted list, sort the file instead of using sort at
# each run of make.

##cpp_macros = ...

# 2. Objects and executable file

objects := $(addsuffix .o, $(basename ${sources}))
# Or, if all the source files have the same suffix, more simply:
##objects := $(sources:.f=.o)

execut = gambit2Cappuccino

# 3. Compiler-dependent part

# Here, possibly, specify macros for the compiler, or include a file.
# If a file is included:
##mode = debug
##include Compiler_options/${FC}_${mode}.mk
# or just :
##include ${FC}_${mode}.mk
# or any relative path to "${FC}_${mode}.mk".

# 4. Rules

FC = gfortran

SHELL = bash
# for echo in log commands

# Extend known suffixes:
# (if the suffixes are not ".f" or ".F")

%.o: %.f90
	$(COMPILE.f) $(OUTPUT_OPTION) $<

%.o: %.F90
	$(COMPILE.F) $(OUTPUT_OPTION) $<

.DELETE_ON_ERROR:
.PHONY: all clean clobber 
#depend

all: ${execut} log
# (should be the first rule)

# Do not include TAGS in "all" because, with make.sh, TAGS would use
# absolute paths.

${execut}: ${objects}
	$(FC) $(LDFLAGS) $^ $(LDLIBS) -o $@

#depend ${makefile_dir}/depend.mk:
#	makedepf90 $(addprefix -D, ${cpp_macros}) -free -Wmissing -Wconfused $(addprefix -I, ${VPATH}) -nosrc $(addprefix -u , ...) ${sources} >${makefile_dir}/depend.mk
# (See whether you need the "-D", "-free" and "-u" options.)

TAGS: ${sources}
	ctags -e --language-force=fortran $^
# Or, on barren machines:
##	etags --language=fortran $^

clean:
	rm -f ${execut} ${objects} log

clobber: clean
	rm -f *.mod TAGS
#	rm -f *.mod ${makefile_dir}/depend.mk TAGS

log:
	hostname >$@
	${FC} ${version_flag} >>$@ 2>&1
	echo -e "\nFC = ${FC}\n\nCPPFLAGS = ${CPPFLAGS}\n\nFFLAGS = ${FFLAGS}\n\nLDLIBS = ${LDLIBS}\n\nLDFLAGS = ${LDFLAGS}" >>$@

#ifneq ($(MAKECMDGOALS), clobber)
## Dependencies among object files and included files:
#include ${makefile_dir}/depend.mk
#endif
